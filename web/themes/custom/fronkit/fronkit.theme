<?php

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Component\Utility\Html;


/**
 * @param $variables
 */
function fronkit_preprocess_page(&$variables)
{
  $node = \Drupal::routeMatch()->getParameter('node_preview');

  if (isset($variables['node']) || !empty($node)) {
    if (empty($node)) {
      $node = $variables['node'];
    }

    $type = $node->getType();

    if ($type == 'webform') {
      if ($node->hasField('field_banner_image')) {
        $media_entity = $node->get('field_banner_image')->referencedEntities()[0];
        $variables['url_banner_image'] = file_create_url($media_entity->get('field_media_image')->entity->uri->value);
      }
    }
  }

}

/**
 * Implements hook_preprocess_field().
 */
function fronkit_preprocess_field(&$variables, $hook)
{

  if ($variables['field_name'] == 'field_process_items' || $variables['field_name'] == 'field_features') {
    foreach ($variables['items'] as $idx => $item) {
      $variables['items'][$idx]['content']['#paragraph']->index = $idx + 1;
    }
  }


  if ($variables['field_type'] == 'link') {
    foreach ($variables['items'] as $key => $item) {
      $title = $variables['items'][$key]['content']['#title'];
      $variables['items'][$key]['content']['#title'] = new FormattableMarkup($title, []);
    }
  }

  $social_links = [
    'field_facebook_link' => 'ri-facebook-fill ri-md',
    'field_linkedin_link' => 'ri-linkedin-fill ri-md',
    'field_twitter_link' => 'ri-twitter-fill ri-md'
  ];

  if (array_key_exists($variables['field_name'], $social_links)) {
    foreach ($variables['items'] as $key => $item) {
      $title = '<i class="' . $social_links[$variables['field_name']] . '"></i>';
      $variables['items'][$key]['content']['#title'] = new FormattableMarkup($title, []);
    }
  }

  if ($variables['field_name'] == "field_icon") {
    foreach ($variables['items'] as $key => $item) {
      $field_value = $variables['items'][$key]['content']['#context']['value'];
      $variables['items'][$key]['content']['#context']['value'] = new FormattableMarkup($field_value, []);
    }
  }

}

/**
 * Implements hook_preprocess_block().
 */
function fronkit_preprocess_block(&$variables)
{
  // Add a class to block title
  $variables['title_attributes']['class'][] = 'block-title';
  // Add a class indicating the custom block bundle.
  if (isset($variables['elements']['content']['#block_content'])) {
    $bundle = $variables['elements']['content']['#block_content']->bundle();
    $variables['attributes']['class'][] = Html::getClass('block-type-' . $bundle);

    $view_mode = strtr($variables['elements']['#configuration']['view_mode'], '.', '_');
    $variables['attributes']['class'][] = Html::getClass('view-mode-' . $view_mode);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 */
function fronkit_theme_suggestions_block_alter(array &$suggestions, array $variables, $hook)
{
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    $bundle = $variables['elements']['content']['#block_content']->bundle();
    $view_mode = strtr($variables['elements']['#configuration']['view_mode'], '.', '_');

    array_splice($suggestions, 1, 0, 'block__bundle__' . $bundle);
    array_splice($suggestions, 1, 0, 'block__bundle__' . $bundle . '__' . $view_mode);
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function fronkit_theme_suggestions_field_alter(array &$suggestions, array $variables, $hook)
{

  $element = $variables['element'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'] . '__' . $element['#view_mode'];
}

/**
 * @param $variables
 */
function fronkit_preprocess_views_view(&$variables)
{
  $view = $variables['view'];
  switch ($view->storage->id()) {
    case 'portfolio':
      if ($view->current_display == 'block_1') {
        $variables['more']['#options']['attributes']['class'] = 'btn btn-primary lift';
      }
  }
}

/**
 * @param $vars
 */
function fronkit_preprocess_node__view__team(&$vars)
{
  $view = $vars['view'];
  $node = $vars['node'];
  foreach ($view->result as $key => $row) {
    if ($row->nid == $node->id()) {
      $vars['row_index'] = $row->index;
    }
  }
}


/**
 * Implements hook_preprocess_breadcrumb().
 */
function fronkit_preprocess_breadcrumb(&$variables)
{
  // We are creating a variable for the Current Page Title, to allow us to print
  // it after the breadcrumbs loop has run.
  $route_match = \Drupal::routeMatch();
  // Search page titles aren't resolved using the title_resolver service - it
  // will always return 'Search' instead of 'Search for [term]', which would
  // give us a breadcrumb of Home >> Search >> Search.
  // @todo Revisit after https://www.drupal.org/project/drupal/issues/2359901
  // @todo Revisit after https://www.drupal.org/project/drupal/issues/2403359
  $entity = $route_match->getParameter('entity');
  if ($entity instanceof SearchPageInterface) {
    $variables['current_page_title'] = $entity->getPlugin()->suggestedTitle();
  } else {
    $variables['current_page_title'] = \Drupal::service('title_resolver')->getTitle(\Drupal::request(), $route_match->getRouteObject());
  }
  // Since we are printing the 'Current Page Title', add the URL cache context.
  // If we don't, then we might end up with something like
  // "Home > Articles" on the Recipes page, which should read "Home > Recipes".
  $variables['#cache']['contexts'][] = 'url';
}
